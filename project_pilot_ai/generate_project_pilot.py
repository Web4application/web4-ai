import os

base_dir = os.getcwd()

files_content = {
    "project_pilot_ai/__init__.py": "",
    "project_pilot_ai/task_extractor.py": '''from typing import List, Dict
import openai
import os

class TaskExtractor:
    def __init__(self, model="gpt-4"):
        self.model = model
        openai.api_key = os.getenv("OPENAI_API_KEY")

    def extract_tasks(self, transcript: str) -> List[Dict]:
        prompt = f\"\"\"
        Extract action items from the following meeting transcript. Include task, deadline (if any), and owner.
        Mark missing fields as 'TBD'.

        Transcript:
        {transcript}
        \"\"\"
        response = openai.ChatCompletion.create(
            model=self.model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=800
        )
        output = response['choices'][0]['message']['content']
        return self._parse_output(output)

    def _parse_output(self, raw_text: str) -> List[Dict]:
        tasks = []
        for line in raw_text.splitlines():
            if "-" in line:
                parts = line.strip("- ").split(" | ")
                if len(parts) == 3:
                    tasks.append({
                        "task": parts[0].strip(),
                        "owner": parts[1].strip(),
                        "deadline": parts[2].strip()
                    })
        return tasks
''',

    "project_pilot_ai/repo_analyzer.py": '''import os

class RepoAnalyzer:
    def __init__(self, base_path: str):
        self.base_path = base_path

    def analyze_structure(self):
        required = ['README.md', 'tests/', 'src/', '.github/workflows/']
        missing = []
        for item in required:
            if not os.path.exists(os.path.join(self.base_path, item)):
                missing.append(item)
        return missing

    def suggest_improvements(self):
        return {
            "missing": self.analyze_structure(),
            "recommendations": [
                "Add CONTRIBUTING.md",
                "Setup automated CI/CD workflows",
                "Separate production and dev configs"
            ]
        }
''',

    "project_pilot_ai/github_agent.py": '''from github import Github
import os

class GitHubAgent:
    def __init__(self, token=None, repo_name=None):
        token = token or os.getenv("GITHUB_TOKEN")
        repo_name = repo_name or os.getenv("GITHUB_REPO")
        self.repo = Github(token).get_repo(repo_name)

    def create_issue(self, title, body="Generated by ProjectPilot AI", assignee=None):
        issue = self.repo.create_issue(
            title=title,
            body=body,
            assignee=assignee if assignee != "TBD" else None
        )
        return issue.html_url
''',

    "project_pilot_ai/workflow_orchestrator.py": '''class WorkflowOrchestrator:
    def __init__(self, extractor, analyzer, github_agent):
        self.extractor = extractor
        self.analyzer = analyzer
        self.github_agent = github_agent

    def run(self, transcript):
        tasks = self.extractor.extract_tasks(transcript)
        structure_report = self.analyzer.suggest_improvements()

        issue_links = []
        for task in tasks:
            issue_url = self.github_agent.create_issue(
                title=task["task"],
                assignee=task["owner"]
            )
            issue_links.append(issue_url)

        return {
            "tasks": tasks,
            "structure": structure_report,
            "issues_created": issue_links
        }
''',

    "api/__init__.py": "",
    "api/routes.py": '''from fastapi import APIRouter, Request
from project_pilot_ai.task_extractor import TaskExtractor
from project_pilot_ai.repo_analyzer import RepoAnalyzer
from project_pilot_ai.github_agent import GitHubAgent
from project_pilot_ai.workflow_orchestrator import WorkflowOrchestrator

router = APIRouter()

@router.post("/analyze-transcript/")
async def analyze_transcript(request: Request):
    data = await request.json()
    transcript = data.get("transcript", "")

    extractor = TaskExtractor()
    analyzer = RepoAnalyzer(base_path=".")
    github_agent = GitHubAgent()

    orchestrator = WorkflowOrchestrator(extractor, analyzer, github_agent)
    result = orchestrator.run(transcript)

    return result
''',

    "run_projectpilot.py": '''import uvicorn
from fastapi import FastAPI
from api.routes import router as projectpilot_router

app = FastAPI(title="ProjectPilot AI")

app.include_router(projectpilot_router, prefix="/api")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
''',

    ".env": '''OPENAI_API_KEY=your-openai-key
GITHUB_TOKEN=your-github-token
GITHUB_REPO=your-user/repo-name
''',

    "requirements.txt": '''fastapi
uvicorn
openai
PyGithub
python-dotenv
'''
}

# Create directories and write files
for rel_path, content in files_content.items():
    full_path = os.path.join(base_dir, rel_path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, "w") as f:
        f.write(content)

print("ProjectPilotAI full scaffold created successfully in Web4AI.")
